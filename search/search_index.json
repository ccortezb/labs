{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS Workshops by Carlos Cortez Bienvenido a ser un arquitecto en AWS Puedes registrarte para tener acceso a videos on-demand aqui y gratis. a link","title":"Home"},{"location":"#aws-workshops-by-carlos-cortez","text":"Bienvenido a ser un arquitecto en AWS Puedes registrarte para tener acceso a videos on-demand aqui y gratis. a link","title":"AWS Workshops by Carlos Cortez"},{"location":"about/","text":"Sobre M\u00ed Yo soy Carlos E. Cortez, AWS Community Builder en Machine Learning Bienvenido a ser un arquitecto en AWS Ingresa a los siguientes workshops guiados: $ echo \"Its time to be an AWS Architect\" Prepara tu PC/Mac Local para poder realizar los workshops: pip install awscli s3cmd saws yum install docker Be an AWS Architect Essentials Disfruta de Workshops gratuitos en tu idioma Nivel 100: Crea tu primer servidor en la nube de AWS Crea tu primera App en Alta disponibilidad Crea tu primer API Rest con Api Gateway y Lambda Crea tu primera base de datos en la nube Crea tu primer flujo Serverless con Lambda y Step Functions Nivel 200: Arquitecta tu primera App desacoplada en la nube Pronto agregaremos otros talleres gratuitos Be an AWS Architect Construye una App con autoscaling Implementa y Despliega una App en Elastic Kubernetes Service Construye un API Rest con Lambda. DynamoDB y API Gateway Pronto Be an AWS ML Engineer a link Tienes dudas del roadmap que debes tomar en tu carrera cloud.? Escribenos NOW!","title":"About"},{"location":"about/#sobre-mi","text":"Yo soy Carlos E. Cortez, AWS Community Builder en Machine Learning Bienvenido a ser un arquitecto en AWS Ingresa a los siguientes workshops guiados: $ echo \"Its time to be an AWS Architect\" Prepara tu PC/Mac Local para poder realizar los workshops: pip install awscli s3cmd saws yum install docker","title":"Sobre M\u00ed"},{"location":"about/#be-an-aws-architect-essentials","text":"Disfruta de Workshops gratuitos en tu idioma Nivel 100: Crea tu primer servidor en la nube de AWS Crea tu primera App en Alta disponibilidad Crea tu primer API Rest con Api Gateway y Lambda Crea tu primera base de datos en la nube Crea tu primer flujo Serverless con Lambda y Step Functions Nivel 200: Arquitecta tu primera App desacoplada en la nube Pronto agregaremos otros talleres gratuitos","title":"Be an AWS Architect Essentials"},{"location":"about/#be-an-aws-architect","text":"Construye una App con autoscaling Implementa y Despliega una App en Elastic Kubernetes Service Construye un API Rest con Lambda. DynamoDB y API Gateway","title":"Be an AWS Architect"},{"location":"about/#_1","text":"","title":""},{"location":"about/#pronto-be-an-aws-ml-engineer","text":"a link Tienes dudas del roadmap que debes tomar en tu carrera cloud.? Escribenos NOW!","title":"Pronto Be an AWS ML Engineer"},{"location":"documentdbdesdecero/","text":"AWS Workshops by Carlos Cortez Bienvenido a ser un arquitecto en AWS a link","title":"Bienvenido"},{"location":"documentdbdesdecero/#aws-workshops-by-carlos-cortez","text":"Bienvenido a ser un arquitecto en AWS a link","title":"AWS Workshops by Carlos Cortez"},{"location":"eksdesdecero/2_ekslab_with_ssm/","text":"Lanzar un Cluster de EKS usando Cloud9 con SSM, 3 zonas de AZ y KMS 1. Crear un ambiente de cloud9 Crear ambiente de Cloud9 Crear Role con acceso admin y agregarlo a la instancia ec2 de cloud9 Cambiar la configuracion de Cloud9 de accesos temporales de AWS Eliminar archivo .aws/credentials: rm -vf ${HOME}/.aws/credentials 2. Instalar dependencias Install kubectl sudo curl --silent --location -o /usr/local/bin/kubectl \\ https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.11/2020-09-18/bin/linux/amd64/kubectl sudo chmod +x /usr/local/bin/kubectl Update awscli Upgrade AWS CLI according to guidance in AWS documentation. sudo pip install --upgrade awscli && hash -r Install jq, envsubst (from GNU gettext utilities) and bash-completion sudo yum -y install jq gettext bash-completion moreutils Install yq for yaml processing echo 'yq() { docker run --rm -i -v \"${PWD}\":/workdir mikefarah/yq \"$@\" }' | tee -a ~/.bashrc && source ~/.bashrc Verify the binaries are in the path and executable for command in kubectl jq envsubst aws do which $command &>/dev/null && echo \"$command in path\" || echo \"$command NOT FOUND\" done Habilitar kubectl para tener bash_completion kubectl completion bash >> ~/.bash_completion . /etc/profile.d/bash_completion.sh . ~/.bash_completion set the AWS Load Balancer Controller version echo 'export LBC_VERSION=\"v2.2.0\"' >> ~/.bash_profile . ~/.bash_profile 3. Configurar y establecer nuestras variables de entorno Cuenta, region y Zonas de disponibilidad export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account) export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region') export AZS=($(aws ec2 describe-availability-zones --query 'AvailabilityZones[].ZoneName' --output text --region $AWS_REGION)) revisar la region: test -n \"$AWS_REGION\" && echo AWS_REGION is \"$AWS_REGION\" || echo AWS_REGION is not set Guardar en el bash profile echo \"export ACCOUNT_ID=${ACCOUNT_ID}\" | tee -a ~/.bash_profile echo \"export AWS_REGION=${AWS_REGION}\" | tee -a ~/.bash_profile echo \"export AZS=(${AZS[@]})\" | tee -a ~/.bash_profile aws configure set default.region ${AWS_REGION} aws configure get default.region Validar el rol que creamos, en este caso se llama \"ecsInstanceRole\": aws sts get-caller-identity --query Arn | grep ecsInstanceRole -q && echo \"IAM role valid\" || echo \"IAM role NOT valid\" 4. CLonar los microservicios de ejemplo cd ~/environment git clone https://github.com/brentley/ecsdemo-frontend.git git clone https://github.com/brentley/ecsdemo-nodejs.git git clone https://github.com/brentley/ecsdemo-crystal.git 5. Configurar nuestra llave de cifrado con AWS KMS Crear una llave KMS: aws kms create-alias --alias-name alias/eksworkshop --target-key-id $(aws kms create-key --query KeyMetadata.Arn --output text) Exportar la variable: export MASTER_ARN=$(aws kms describe-key --key-id alias/eksworkshop --query KeyMetadata.Arn --output text) agregarlo al bash profile echo \"export MASTER_ARN=${MASTER_ARN}\" | tee -a ~/.bash_profile 6. LANZAR EL CLUSTER EKS 6.1 Instalar eksctl bajamos de este repo: curl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp sudo mv -v /tmp/eksctl /usr/local/bin verificamos: eksctl version agregamos al bash profile eksctl completion bash >> ~/.bash_completion . /etc/profile.d/bash_completion.sh . ~/.bash_completion 6.2 CREAR CLUSTER CON UN ARCHIVO YAML Correr el siguiente comando para crear la configuracion del cluster y el nombre del cluster Puedes cambiar el nombre en el parametro \"name\" Asegurate que las variables funcionen y esten establecidas en el bash profile con los pasos anteriores. cat << EOF > eksworkshop.yaml --- apiVersion: eksctl.io/v1alpha5 kind: ClusterConfig metadata: name: eksworkshop-eksctl region: ${AWS_REGION} version: \"1.17\" availabilityZones: [\"${AZS[0]}\", \"${AZS[1]}\", \"${AZS[2]}\"] managedNodeGroups: - name: nodegroup desiredCapacity: 3 instanceType: t3.small ssh: enableSsm: true # To enable all of the control plane logs, uncomment below: # cloudWatch: # clusterLogging: # enableTypes: [\"*\"] secretsEncryption: keyARN: ${MASTER_ARN} EOF Ejecutar el archivo con eksctl eksctl create cluster -f eksworkshop.yaml Obtenemos informacion de los nodos para verificar que todo este funcionando correctamente: kubectl get nodes Opcional: Exportamos una variable que nos ayudara mas adelante. STACK_NAME=$(eksctl get nodegroup --cluster eksworkshop-eksctl -o json | jq -r '.[].StackName') ROLE_NAME=$(aws cloudformation describe-stack-resources --stack-name $STACK_NAME | jq -r '.StackResources[] | select(.ResourceType==\"AWS::IAM::Role\") | .PhysicalResourceId') echo \"export ROLE_NAME=${ROLE_NAME}\" | tee -a ~/.bash_profile","title":"Lab 2 Lanzando un EKS CLuster con eksctl"},{"location":"eksdesdecero/2_ekslab_with_ssm/#lanzar-un-cluster-de-eks-usando-cloud9-con-ssm-3-zonas-de-az-y-kms","text":"","title":"Lanzar un Cluster de EKS usando Cloud9 con SSM, 3 zonas de AZ y KMS"},{"location":"eksdesdecero/2_ekslab_with_ssm/#1-crear-un-ambiente-de-cloud9","text":"Crear ambiente de Cloud9 Crear Role con acceso admin y agregarlo a la instancia ec2 de cloud9 Cambiar la configuracion de Cloud9 de accesos temporales de AWS Eliminar archivo .aws/credentials: rm -vf ${HOME}/.aws/credentials","title":"1. Crear un ambiente de cloud9"},{"location":"eksdesdecero/2_ekslab_with_ssm/#2-instalar-dependencias","text":"Install kubectl sudo curl --silent --location -o /usr/local/bin/kubectl \\ https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.11/2020-09-18/bin/linux/amd64/kubectl sudo chmod +x /usr/local/bin/kubectl Update awscli Upgrade AWS CLI according to guidance in AWS documentation. sudo pip install --upgrade awscli && hash -r Install jq, envsubst (from GNU gettext utilities) and bash-completion sudo yum -y install jq gettext bash-completion moreutils Install yq for yaml processing echo 'yq() { docker run --rm -i -v \"${PWD}\":/workdir mikefarah/yq \"$@\" }' | tee -a ~/.bashrc && source ~/.bashrc Verify the binaries are in the path and executable for command in kubectl jq envsubst aws do which $command &>/dev/null && echo \"$command in path\" || echo \"$command NOT FOUND\" done Habilitar kubectl para tener bash_completion kubectl completion bash >> ~/.bash_completion . /etc/profile.d/bash_completion.sh . ~/.bash_completion set the AWS Load Balancer Controller version echo 'export LBC_VERSION=\"v2.2.0\"' >> ~/.bash_profile . ~/.bash_profile","title":"2. Instalar dependencias"},{"location":"eksdesdecero/2_ekslab_with_ssm/#3-configurar-y-establecer-nuestras-variables-de-entorno","text":"Cuenta, region y Zonas de disponibilidad export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account) export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region') export AZS=($(aws ec2 describe-availability-zones --query 'AvailabilityZones[].ZoneName' --output text --region $AWS_REGION)) revisar la region: test -n \"$AWS_REGION\" && echo AWS_REGION is \"$AWS_REGION\" || echo AWS_REGION is not set Guardar en el bash profile echo \"export ACCOUNT_ID=${ACCOUNT_ID}\" | tee -a ~/.bash_profile echo \"export AWS_REGION=${AWS_REGION}\" | tee -a ~/.bash_profile echo \"export AZS=(${AZS[@]})\" | tee -a ~/.bash_profile aws configure set default.region ${AWS_REGION} aws configure get default.region Validar el rol que creamos, en este caso se llama \"ecsInstanceRole\": aws sts get-caller-identity --query Arn | grep ecsInstanceRole -q && echo \"IAM role valid\" || echo \"IAM role NOT valid\"","title":"3. Configurar y establecer nuestras variables de entorno"},{"location":"eksdesdecero/2_ekslab_with_ssm/#4-clonar-los-microservicios-de-ejemplo","text":"cd ~/environment git clone https://github.com/brentley/ecsdemo-frontend.git git clone https://github.com/brentley/ecsdemo-nodejs.git git clone https://github.com/brentley/ecsdemo-crystal.git","title":"4. CLonar los microservicios de ejemplo"},{"location":"eksdesdecero/2_ekslab_with_ssm/#5-configurar-nuestra-llave-de-cifrado-con-aws-kms","text":"Crear una llave KMS: aws kms create-alias --alias-name alias/eksworkshop --target-key-id $(aws kms create-key --query KeyMetadata.Arn --output text) Exportar la variable: export MASTER_ARN=$(aws kms describe-key --key-id alias/eksworkshop --query KeyMetadata.Arn --output text) agregarlo al bash profile echo \"export MASTER_ARN=${MASTER_ARN}\" | tee -a ~/.bash_profile","title":"5. Configurar nuestra llave de cifrado con AWS KMS"},{"location":"eksdesdecero/2_ekslab_with_ssm/#6-lanzar-el-cluster-eks","text":"","title":"6. LANZAR EL CLUSTER EKS"},{"location":"eksdesdecero/2_ekslab_with_ssm/#61-instalar-eksctl","text":"bajamos de este repo: curl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp sudo mv -v /tmp/eksctl /usr/local/bin verificamos: eksctl version agregamos al bash profile eksctl completion bash >> ~/.bash_completion . /etc/profile.d/bash_completion.sh . ~/.bash_completion","title":"6.1 Instalar eksctl"},{"location":"eksdesdecero/2_ekslab_with_ssm/#62-crear-cluster-con-un-archivo-yaml","text":"Correr el siguiente comando para crear la configuracion del cluster y el nombre del cluster Puedes cambiar el nombre en el parametro \"name\" Asegurate que las variables funcionen y esten establecidas en el bash profile con los pasos anteriores. cat << EOF > eksworkshop.yaml --- apiVersion: eksctl.io/v1alpha5 kind: ClusterConfig metadata: name: eksworkshop-eksctl region: ${AWS_REGION} version: \"1.17\" availabilityZones: [\"${AZS[0]}\", \"${AZS[1]}\", \"${AZS[2]}\"] managedNodeGroups: - name: nodegroup desiredCapacity: 3 instanceType: t3.small ssh: enableSsm: true # To enable all of the control plane logs, uncomment below: # cloudWatch: # clusterLogging: # enableTypes: [\"*\"] secretsEncryption: keyARN: ${MASTER_ARN} EOF Ejecutar el archivo con eksctl eksctl create cluster -f eksworkshop.yaml Obtenemos informacion de los nodos para verificar que todo este funcionando correctamente: kubectl get nodes Opcional: Exportamos una variable que nos ayudara mas adelante. STACK_NAME=$(eksctl get nodegroup --cluster eksworkshop-eksctl -o json | jq -r '.[].StackName') ROLE_NAME=$(aws cloudformation describe-stack-resources --stack-name $STACK_NAME | jq -r '.StackResources[] | select(.ResourceType==\"AWS::IAM::Role\") | .PhysicalResourceId') echo \"export ROLE_NAME=${ROLE_NAME}\" | tee -a ~/.bash_profile","title":"6.2 CREAR CLUSTER CON UN ARCHIVO YAML"},{"location":"eksdesdecero/3_deploy_apps_with_helm/","text":"Usando HELM para desplegar apps con EKS 1. Gestionando Charts agregando el repositorio de datos de Charts con HELM: first, add the default repository, then update helm repo add stable https://charts.helm.sh/stable helm repo update Buscando repos con chart helm search repo Busquemos NGINX helm search repo nginx Agregando otros repos aparte de los Stable, (bitnami) helm repo add bitnami https://charts.bitnami.com/bitnami Ahora es posible lanzar Nginx de Bitnami helm search repo nginx 2. Instalando Nginx desde Charts helm install mywebserver bitnami/nginx Podemos revisar la informacion de este despliegue: kubectl get svc,po,deploy Ver el despliegue: kubectl describe deployment mywebserver Ver los Pods: kubectl get pods -l app.kubernetes.io/name=nginx 3. Ingresando a nuestro servicio desplegado Saquemos la URL de \"EXTERNAL-IP\" y coloquemoslo en un navegador: kubectl get service mywebserver-nginx -o wide 4. Desinstalando rapidamente los servicios Ver la lista completa de servicios con HELM helm list Eliminarlos: helm uninstall mywebserver Comprobar la eliminacion: kubectl get pods -l app.kubernetes.io/name=nginx kubectl get service mywebserver-nginx -o wide","title":"Lab 3 Desplegando Apps con HELM"},{"location":"eksdesdecero/3_deploy_apps_with_helm/#usando-helm-para-desplegar-apps-con-eks","text":"","title":"Usando HELM para desplegar apps con EKS"},{"location":"eksdesdecero/3_deploy_apps_with_helm/#1-gestionando-charts","text":"agregando el repositorio de datos de Charts con HELM:","title":"1. Gestionando Charts"},{"location":"eksdesdecero/3_deploy_apps_with_helm/#first-add-the-default-repository-then-update","text":"helm repo add stable https://charts.helm.sh/stable helm repo update Buscando repos con chart helm search repo Busquemos NGINX helm search repo nginx Agregando otros repos aparte de los Stable, (bitnami) helm repo add bitnami https://charts.bitnami.com/bitnami Ahora es posible lanzar Nginx de Bitnami helm search repo nginx","title":"first, add the default repository, then update"},{"location":"eksdesdecero/3_deploy_apps_with_helm/#2-instalando-nginx-desde-charts","text":"helm install mywebserver bitnami/nginx Podemos revisar la informacion de este despliegue: kubectl get svc,po,deploy Ver el despliegue: kubectl describe deployment mywebserver Ver los Pods: kubectl get pods -l app.kubernetes.io/name=nginx","title":"2. Instalando Nginx desde Charts"},{"location":"eksdesdecero/3_deploy_apps_with_helm/#3-ingresando-a-nuestro-servicio-desplegado","text":"Saquemos la URL de \"EXTERNAL-IP\" y coloquemoslo en un navegador: kubectl get service mywebserver-nginx -o wide","title":"3. Ingresando a nuestro servicio desplegado"},{"location":"eksdesdecero/3_deploy_apps_with_helm/#4-desinstalando-rapidamente-los-servicios","text":"Ver la lista completa de servicios con HELM helm list Eliminarlos: helm uninstall mywebserver Comprobar la eliminacion: kubectl get pods -l app.kubernetes.io/name=nginx kubectl get service mywebserver-nginx -o wide","title":"4. Desinstalando rapidamente los servicios"},{"location":"eksdesdecero/4_CIS_EKS_Benchmark_con_kube-bench/","text":"CIS EKS Benchmark con kube-bench 1. Aprendamos que es CIS Kubernetes Benchmark CIS Kubernetes Benchmark: https://www.cisecurity.org/benchmark/kubernetes/ 2. kube-bench https://github.com/aquasecurity/kube-bench Trabajaremos con la version estable 0.3.1 3. Trabajando con kube-bench Listar los nodos actuales kubectl get nodes -o wide Ingresaer a 1 nodo con SSM desde la consola de EC2 sh-4.2$ sudo wget https://github.com/aquasecurity/kube-bench/releases/download/v0.3.1/kube-bench_0.3.1_linux_amd64.rpm Respuesta: Resolving github.com (github.com)... 140.82.113.3 Connecting to github.com (github.com)|140.82.113.3|:443... connected. HTTP request sent, awaiting response... 302 Found Location: https://github-releases.githubusercontent.com/94779471/55bb7480-c2e1-11ea-9d1d-513b24984bbd?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210612%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210612T195900Z&X-Amz-Expires=300&X-Amz-Signature=ff8c6856e96b32d719394565b8742436d294a1715257637be22293ad7b6f26b4&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=94779471&response-content-disposition=attachment%3B%20filename%3Dkube-bench_0.3.1_linux_amd64.rpm&response-content-type=application%2Foctet-stream [following] --2021-06-12 19:59:00-- https://github-releases.githubusercontent.com/94779471/55bb7480-c2e1-11ea-9d1d-513b24984bbd?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210612%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210612T195900Z&X-Amz-Expires=300&X-Amz-Signature=ff8c6856e96b32d719394565b8742436d294a1715257637be22293ad7b6f26b4&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=94779471&response-content-disposition=attachment%3B%20filename%3Dkube-bench_0.3.1_linux_amd64.rpm&response-content-type=application%2Foctet-stream Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.111.154, 185.199.108.154, 185.199.109.154, ... Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.111.154|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 6619503 (6.3M) [application/octet-stream] Saving to: \u2018kube-bench_0.3.1_linux_amd64.rpm\u2019 100%[=================================================================================================================================================================>] 6,619,503 37.4MB/s in 0.2s 2021-06-12 19:59:01 (37.4 MB/s) - \u2018kube-bench_0.3.1_linux_amd64.rpm\u2019 saved [6619503/6619503] Instalamos la version 0.3.1 directo en el nodo que elijamos: sh-4.2$ sudo rpm -Uvh kube-bench_0.3.1_linux_amd64.rpm Resultado: Preparing... ################################# [100%] Updating / installing... 1:kube-bench-0:0.3.1-1 ################################# [100%] Ejecutamos el assessment con kube-bench: sh-4.2$ kube-bench --benchmark eks-1.0 Resultado del assessment: [INFO] 3 Worker Node Security Configuration [INFO] 3.1 Worker Node Configuration Files [PASS] 3.1.1 Ensure that the proxy kubeconfig file permissions are set to 644 or more restrictive (Scored) [PASS] 3.1.2 Ensure that the proxy kubeconfig file ownership is set to root:root (Scored) [PASS] 3.1.3 Ensure that the kubelet configuration file has permissions set to 644 or more restrictive (Scored) [PASS] 3.1.4 Ensure that the kubelet configuration file ownership is set to root:root (Scored) [INFO] 3.2 Kubelet [PASS] 3.2.1 Ensure that the --anonymous-auth argument is set to false (Scored) [PASS] 3.2.2 Ensure that the --authorization-mode argument is not set to AlwaysAllow (Scored) [PASS] 3.2.3 Ensure that the --client-ca-file argument is set as appropriate (Scored) [PASS] 3.2.4 Ensure that the --read-only-port argument is set to 0 (Scored) [PASS] 3.2.5 Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Scored) [PASS] 3.2.6 Ensure that the --protect-kernel-defaults argument is set to true (Scored) [PASS] 3.2.7 Ensure that the --make-iptables-util-chains argument is set to true (Scored) [PASS] 3.2.8 Ensure that the --hostname-override argument is not set (Scored) [WARN] 3.2.9 Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture (Scored) [PASS] 3.2.10 Ensure that the --rotate-certificates argument is not set to false (Scored) [PASS] 3.2.11 Ensure that the RotateKubeletServerCertificate argument is set to true (Scored) == Remediations == 3.2.9 If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. Based on your system, restart the kubelet service. For example: systemctl daemon-reload systemctl restart kubelet.service == Summary == 14 checks PASS 0 checks FAIL 1 checks WARN 0 checks INFO sh-4.2$ 4. Revisemos a detalle como evaluamos este resumen: https://www.aquasec.com/cloud-native-academy/kubernetes-in-production/kubernetes-cis-benchmark-best-practices-in-brief/","title":"Lab 4 Assessment de seguridad en EKS con kube-bench (CIS EKS Benchmark)"},{"location":"eksdesdecero/4_CIS_EKS_Benchmark_con_kube-bench/#cis-eks-benchmark-con-kube-bench","text":"","title":"CIS EKS Benchmark con kube-bench"},{"location":"eksdesdecero/4_CIS_EKS_Benchmark_con_kube-bench/#1-aprendamos-que-es-cis-kubernetes-benchmark","text":"CIS Kubernetes Benchmark: https://www.cisecurity.org/benchmark/kubernetes/","title":"1. Aprendamos que es CIS Kubernetes Benchmark"},{"location":"eksdesdecero/4_CIS_EKS_Benchmark_con_kube-bench/#2-kube-bench","text":"https://github.com/aquasecurity/kube-bench Trabajaremos con la version estable 0.3.1","title":"2. kube-bench"},{"location":"eksdesdecero/4_CIS_EKS_Benchmark_con_kube-bench/#3-trabajando-con-kube-bench","text":"Listar los nodos actuales kubectl get nodes -o wide Ingresaer a 1 nodo con SSM desde la consola de EC2 sh-4.2$ sudo wget https://github.com/aquasecurity/kube-bench/releases/download/v0.3.1/kube-bench_0.3.1_linux_amd64.rpm Respuesta: Resolving github.com (github.com)... 140.82.113.3 Connecting to github.com (github.com)|140.82.113.3|:443... connected. HTTP request sent, awaiting response... 302 Found Location: https://github-releases.githubusercontent.com/94779471/55bb7480-c2e1-11ea-9d1d-513b24984bbd?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210612%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210612T195900Z&X-Amz-Expires=300&X-Amz-Signature=ff8c6856e96b32d719394565b8742436d294a1715257637be22293ad7b6f26b4&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=94779471&response-content-disposition=attachment%3B%20filename%3Dkube-bench_0.3.1_linux_amd64.rpm&response-content-type=application%2Foctet-stream [following] --2021-06-12 19:59:00-- https://github-releases.githubusercontent.com/94779471/55bb7480-c2e1-11ea-9d1d-513b24984bbd?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210612%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210612T195900Z&X-Amz-Expires=300&X-Amz-Signature=ff8c6856e96b32d719394565b8742436d294a1715257637be22293ad7b6f26b4&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=94779471&response-content-disposition=attachment%3B%20filename%3Dkube-bench_0.3.1_linux_amd64.rpm&response-content-type=application%2Foctet-stream Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.111.154, 185.199.108.154, 185.199.109.154, ... Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.111.154|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 6619503 (6.3M) [application/octet-stream] Saving to: \u2018kube-bench_0.3.1_linux_amd64.rpm\u2019 100%[=================================================================================================================================================================>] 6,619,503 37.4MB/s in 0.2s 2021-06-12 19:59:01 (37.4 MB/s) - \u2018kube-bench_0.3.1_linux_amd64.rpm\u2019 saved [6619503/6619503] Instalamos la version 0.3.1 directo en el nodo que elijamos: sh-4.2$ sudo rpm -Uvh kube-bench_0.3.1_linux_amd64.rpm Resultado: Preparing... ################################# [100%] Updating / installing... 1:kube-bench-0:0.3.1-1 ################################# [100%] Ejecutamos el assessment con kube-bench: sh-4.2$ kube-bench --benchmark eks-1.0 Resultado del assessment: [INFO] 3 Worker Node Security Configuration [INFO] 3.1 Worker Node Configuration Files [PASS] 3.1.1 Ensure that the proxy kubeconfig file permissions are set to 644 or more restrictive (Scored) [PASS] 3.1.2 Ensure that the proxy kubeconfig file ownership is set to root:root (Scored) [PASS] 3.1.3 Ensure that the kubelet configuration file has permissions set to 644 or more restrictive (Scored) [PASS] 3.1.4 Ensure that the kubelet configuration file ownership is set to root:root (Scored) [INFO] 3.2 Kubelet [PASS] 3.2.1 Ensure that the --anonymous-auth argument is set to false (Scored) [PASS] 3.2.2 Ensure that the --authorization-mode argument is not set to AlwaysAllow (Scored) [PASS] 3.2.3 Ensure that the --client-ca-file argument is set as appropriate (Scored) [PASS] 3.2.4 Ensure that the --read-only-port argument is set to 0 (Scored) [PASS] 3.2.5 Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Scored) [PASS] 3.2.6 Ensure that the --protect-kernel-defaults argument is set to true (Scored) [PASS] 3.2.7 Ensure that the --make-iptables-util-chains argument is set to true (Scored) [PASS] 3.2.8 Ensure that the --hostname-override argument is not set (Scored) [WARN] 3.2.9 Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture (Scored) [PASS] 3.2.10 Ensure that the --rotate-certificates argument is not set to false (Scored) [PASS] 3.2.11 Ensure that the RotateKubeletServerCertificate argument is set to true (Scored) == Remediations == 3.2.9 If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. Based on your system, restart the kubelet service. For example: systemctl daemon-reload systemctl restart kubelet.service == Summary == 14 checks PASS 0 checks FAIL 1 checks WARN 0 checks INFO sh-4.2$","title":"3. Trabajando con kube-bench"},{"location":"eksdesdecero/4_CIS_EKS_Benchmark_con_kube-bench/#4-revisemos-a-detalle-como-evaluamos-este-resumen","text":"https://www.aquasec.com/cloud-native-academy/kubernetes-in-production/kubernetes-cis-benchmark-best-practices-in-brief/","title":"4. Revisemos a detalle como evaluamos este resumen:"},{"location":"eksdesdecero/ekslab1/","text":"Lab 1 EKS 1: IAM Instance EC2 Role, admin access 2: SETTINGS export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account) export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region') test -n \"$AWS_REGION\" && echo AWS_REGION is \"$AWS_REGION\" || echo AWS_REGION is not set echo \"export ACCOUNT_ID=${ACCOUNT_ID}\" | tee -a ~/.bash_profile echo \"export AWS_REGION=${AWS_REGION}\" | tee -a ~/.bash_profile aws configure set default.region ${AWS_REGION} aws configure get default.region aws sts get-caller-identity --query Arn | grep eksworkshop-admin -q && echo \"IAM role valid\" || echo \"IAM role NOT valid\" create Key Pair create KMS custom managed key aws kms create-alias --alias-name alias/eksworkshop --target-key-id $(aws kms create-key --query KeyMetadata.Arn --output text) export MASTER_ARN=$(aws kms describe-key --key-id alias/eksworkshop --query KeyMetadata.Arn --output text) echo \"export MASTER_ARN=${MASTER_ARN}\" | tee -a ~/.bash_profile install eksctl curl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp sudo mv -v /tmp/eksctl /usr/local/bin Confirm the eksctl command works: eksctl version Enable eksctl bash-completion eksctl completion bash >> ~/.bash_completion . /etc/profile.d/bash_completion.sh . ~/.bash_completion test IAM Role and validate that your Arn contains and an Instance Id aws sts get-caller-identity { \"Account\": \"123456789012\", \"UserId\": \"AROA1SAMPLEAWSIAMROLE:i-01234567890abcdef\", \"Arn\": \"arn:aws:sts::123456789012:assumed-role/eksworkshop-admin/i-01234567890abcdef\" } 3: Create an EKS cluster cat << EOF > eksworkshop.yaml --- apiVersion: eksctl.io/v1alpha5 kind: ClusterConfig metadata: name: eksworkshop-eksctl region: ${AWS_REGION} managedNodeGroups: - name: nodegroup desiredCapacity: 3 iam: withAddonPolicies: albIngress: true secretsEncryption: keyARN: ${MASTER_ARN} EOF create cluster command eksctl create cluster -f eksworkshop.yaml 4: Test the cluster: $ aws eks --region us-east-1 update-kubeconfig --name EKSCCortez Get cluster nodes $ kubectl get nodes NAME STATUS ROLES AGE VERSION ip-192-168-17-115.us-east-2.compute.internal Ready <none> 67m v1.15.10-eks-bac369 ip-192-168-42-126.us-east-2.compute.internal Ready <none> 67m v1.15.10-eks-bac369 ip-192-168-68-123.us-east-2.compute.internal Ready <none> 67m v1.15.10-eks-bac369 [ec2-user@ip-172-31-5-35 ~]$ 5: INSTALL A DEMO APP ON KUBERNETES Guestbook app written in PHP and using Redis for storing guest entries. kubectl apply -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook-go/redis-master-controller.json kubectl apply -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook-go/redis-master-service.json kubectl apply -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook-go/redis-slave-controller.json kubectl apply -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook-go/redis-slave-service.json kubectl apply -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook-go/guestbook-controller.json kubectl apply -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook-go/guestbook-service.json get pods [ec2-user@ip-172-31-5-35 ~]$ kubectl get pods NAME READY STATUS RESTARTS AGE guestbook-fg5q9 0/1 Pending 0 4h57m guestbook-lr6w9 0/1 Pending 0 4h57m guestbook-rmxdm 0/1 Pending 0 4h57m redis-master-7bs4q 0/1 Pending 0 4h57m redis-slave-dg2kg 0/1 Pending 0 4h57m redis-slave-mfwwf 0/1 Pending 0 4h57m describe pods $ kubectl describe pods $ kubectl get pods --all-namespaces NAMESPACE NAME READY STATUS RESTARTS AGE default guestbook-kc7z7 1/1 Running 0 45m default guestbook-qdkpv 1/1 Running 0 45m default guestbook-wp44s 1/1 Running 0 45m default redis-master-tgd9f 1/1 Running 0 45m default redis-slave-25z8n 1/1 Running 0 45m default redis-slave-qkgbk 1/1 Running 0 45m kube-system aws-node-7fm2b 1/1 Running 0 53m kube-system aws-node-kq796 1/1 Running 0 53m kube-system aws-node-ls4xt 1/1 Running 0 53m kube-system coredns-5fb4bd6df8-s6vpr 1/1 Running 0 57m kube-system coredns-5fb4bd6df8-x5244 1/1 Running 0 57m kube-system kube-proxy-7dn58 1/1 Running 0 53m kube-system kube-proxy-lgtv2 1/1 Running 0 53m kube-system kube-proxy-xgjdn 1/1 Running 0 53m get nodes $ kubectl get nodes --show-labels NAME STATUS ROLES AGE VERSION LABELS ip-192-168-17-115.us-east-2.compute.internal Ready <none> 50m v1.15.10-eks-bac369 alpha.eksctl.io/cluster-name=eksworkshop-eksctl,alpha.eksctl.io/nodegroup-name=nodegroup,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=m5.large,beta.kubernetes.io/os=linux,eks.amazonaws.com/nodegroup-image=ami-08880278b3cac5832,eks.amazonaws.com/nodegroup=nodegroup,failure-domain.beta.kubernetes.io/region=us-east-2,failure-domain.beta.kubernetes.io/zone=us-east-2b,kubernetes.io/arch=amd64,kubernetes.io/hostname=ip-192-168-17-115.us-east-2.compute.internal,kubernetes.io/os=linux ip-192-168-42-126.us-east-2.compute.internal Ready <none> 50m v1.15.10-eks-bac369 alpha.eksctl.io/cluster-name=eksworkshop-eksctl,alpha.eksctl.io/nodegroup-name=nodegroup,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=m5.large,beta.kubernetes.io/os=linux,eks.amazonaws.com/nodegroup-image=ami-08880278b3cac5832,eks.amazonaws.com/nodegroup=nodegroup,failure-domain.beta.kubernetes.io/region=us-east-2,failure-domain.beta.kubernetes.io/zone=us-east-2a,kubernetes.io/arch=amd64,kubernetes.io/hostname=ip-192-168-42-126.us-east-2.compute.internal,kubernetes.io/os=linux ip-192-168-68-123.us-east-2.compute.internal Ready <none> 50m v1.15.10-eks-bac369 alpha.eksctl.io/cluster-name=eksworkshop-eksctl,alpha.eksctl.io/nodegroup-name=nodegroup,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=m5.large,beta.kubernetes.io/os=linux,eks.amazonaws.com/nodegroup-image=ami-08880278b3cac5832,eks.amazonaws.com/nodegroup=nodegroup,failure-domain.beta.kubernetes.io/region=us-east-2,failure-domain.beta.kubernetes.io/zone=us-east-2c,kubernetes.io/arch=amd64,kubernetes.io/hostname=ip-192-168-68-123.us-east-2.compute.internal,kubernetes.io/os=linux another way to get pods $ kubectl get po --show-labels NAME READY STATUS RESTARTS AGE LABELS guestbook-kc7z7 1/1 Running 0 30m app=guestbook guestbook-qdkpv 1/1 Running 0 30m app=guestbook guestbook-wp44s 1/1 Running 0 30m app=guestbook redis-master-tgd9f 1/1 Running 0 31m app=redis,role=master redis-slave-25z8n 1/1 Running 0 31m app=redis,role=slave red``` ### view the kube config file $ vim .kube/config ### get services $ kubectl get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE guestbook LoadBalancer 10.100.181.57 acca42460a222450992ad93a597fe11f-494034622.us-east-2.elb.amazonaws.com 3000:31115/TCP 24m kubernetes ClusterIP 10.100.0.1 <none> 443/TCP 36m redis-master ClusterIP 10.100.246.73 <none> 6379/TCP 24m redis-slave ClusterIP 10.100.255.129 <none> 6379/TCP 24m get namespaces $ kubectl get ns NAME STATUS AGE default Active 40m kube-node-lease Active 40m kube-public Active 40m kube-system Active 40m $ kubectl get events --all-namespaces NAMESPACE LAST SEEN TYPE REASON OBJECT MESSAGE default 24m Normal Scheduled pod/guestbook-kc7z7 Successfully assigned default/guestbook-kc7z7 to ip-192-168-17-115.us-east-2.compute.internal default 24m Normal Pulling pod/guestbook-kc7z7 Pulling image \"k8s.gcr.io/guestbook:v3\" default 24m Normal Pulled pod/guestbook-kc7z7 Successfully pulled image \"k8s.gcr.io/guestbook:v3\" default 24m Normal Created pod/guestbook-kc7z7 Created container guestbook default 24m Normal Started pod/guestbook-kc7z7 Started container guestbook default 24m Normal Scheduled pod/guestbook-qdkpv Successfully assigned default/guestbook-qdkpv to ip-192-168-42-126.us-east-2.compute.internal default 24m Normal Pulling pod/guestbook-qdkpv Pulling image \"k8s.gcr.io/guestbook:v3\" default 24m Normal Pulled pod/guestbook-qdkpv Successfully pulled image \"k8s.gcr.io/guestbook:v3\" default 24m Normal Created pod/guestbook-qdkpv Created container guestbook Another Example: NGINX with 3 Replicas run Nginx from scratch in 5 mins $ kubectl run nginx --image nginx --replicas 3 --port 80 deployment.apps/nginx created expose service $ kubectl expose deployment nginx --type=LoadBalancer service/nginx exposed get services $ kubectl get services -o=wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR guestbook LoadBalancer 10.100.181.57 acca42460a222450992ad93a597fe11f-494034622.us-east-2.elb.amazonaws.com 3000:31115/TCP 3h47m app=guestbook kubernetes ClusterIP 10.100.0.1 <none> 443/TCP 3h59m <none> nginx LoadBalancer 10.100.46.84 aec9f297b0c434da2b1f67dfb90de0e6-1071448948.us-east-2.elb.amazonaws.com 80:30507/TCP 14s run=nginx redis-master ClusterIP 10.100.246.73 <none> 6379/TCP 3h47m app=redis,role=master redis-slave ClusterIP 10.100.255.129 <none> 6379/TCP 3h47m app=redis,role=slave get nodes $ kubectl get nodes NAME STATUS ROLES AGE VERSION ip-192-168-17-115.us-east-2.compute.internal Ready <none> 3h55m v1.15.10-eks-bac369 ip-192-168-42-126.us-east-2.compute.internal Ready <none> 3h55m v1.15.10-eks-bac369 ip-192-168-68-123.us-east-2.compute.internal Ready <none> 3h55m v1.15.10-eks-bac369 bonus: cheat sheet from linux academy Cheat Sheet https://linuxacademy.com/site-content/uploads/2019/04/Kubernetes-Cheat-Sheet_07182019.pdf","title":"Lab 1 Nginx en HA con EKS"},{"location":"eksdesdecero/ekslab1/#lab-1-eks","text":"","title":"Lab 1 EKS"},{"location":"eksdesdecero/ekslab1/#1-iam-instance-ec2-role-admin-access","text":"","title":"1: IAM Instance EC2 Role, admin access"},{"location":"eksdesdecero/ekslab1/#2-settings","text":"export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account) export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region') test -n \"$AWS_REGION\" && echo AWS_REGION is \"$AWS_REGION\" || echo AWS_REGION is not set echo \"export ACCOUNT_ID=${ACCOUNT_ID}\" | tee -a ~/.bash_profile echo \"export AWS_REGION=${AWS_REGION}\" | tee -a ~/.bash_profile aws configure set default.region ${AWS_REGION} aws configure get default.region aws sts get-caller-identity --query Arn | grep eksworkshop-admin -q && echo \"IAM role valid\" || echo \"IAM role NOT valid\" create Key Pair create KMS custom managed key aws kms create-alias --alias-name alias/eksworkshop --target-key-id $(aws kms create-key --query KeyMetadata.Arn --output text) export MASTER_ARN=$(aws kms describe-key --key-id alias/eksworkshop --query KeyMetadata.Arn --output text) echo \"export MASTER_ARN=${MASTER_ARN}\" | tee -a ~/.bash_profile install eksctl curl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp sudo mv -v /tmp/eksctl /usr/local/bin Confirm the eksctl command works: eksctl version Enable eksctl bash-completion eksctl completion bash >> ~/.bash_completion . /etc/profile.d/bash_completion.sh . ~/.bash_completion test IAM Role and validate that your Arn contains and an Instance Id aws sts get-caller-identity { \"Account\": \"123456789012\", \"UserId\": \"AROA1SAMPLEAWSIAMROLE:i-01234567890abcdef\", \"Arn\": \"arn:aws:sts::123456789012:assumed-role/eksworkshop-admin/i-01234567890abcdef\" }","title":"2: SETTINGS"},{"location":"eksdesdecero/ekslab1/#3-create-an-eks-cluster","text":"cat << EOF > eksworkshop.yaml --- apiVersion: eksctl.io/v1alpha5 kind: ClusterConfig metadata: name: eksworkshop-eksctl region: ${AWS_REGION} managedNodeGroups: - name: nodegroup desiredCapacity: 3 iam: withAddonPolicies: albIngress: true secretsEncryption: keyARN: ${MASTER_ARN} EOF","title":"3: Create an EKS cluster"},{"location":"eksdesdecero/ekslab1/#create-cluster-command","text":"eksctl create cluster -f eksworkshop.yaml","title":"create cluster command"},{"location":"eksdesdecero/ekslab1/#4-test-the-cluster","text":"$ aws eks --region us-east-1 update-kubeconfig --name EKSCCortez","title":"4: Test the cluster:"},{"location":"eksdesdecero/ekslab1/#get-cluster-nodes","text":"$ kubectl get nodes NAME STATUS ROLES AGE VERSION ip-192-168-17-115.us-east-2.compute.internal Ready <none> 67m v1.15.10-eks-bac369 ip-192-168-42-126.us-east-2.compute.internal Ready <none> 67m v1.15.10-eks-bac369 ip-192-168-68-123.us-east-2.compute.internal Ready <none> 67m v1.15.10-eks-bac369 [ec2-user@ip-172-31-5-35 ~]$","title":"Get cluster nodes"},{"location":"eksdesdecero/ekslab1/#5-install-a-demo-app-on-kubernetes","text":"","title":"5: INSTALL A DEMO APP ON KUBERNETES"},{"location":"eksdesdecero/ekslab1/#guestbook-app-written-in-php-and-using-redis-for-storing-guest-entries","text":"kubectl apply -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook-go/redis-master-controller.json kubectl apply -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook-go/redis-master-service.json kubectl apply -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook-go/redis-slave-controller.json kubectl apply -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook-go/redis-slave-service.json kubectl apply -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook-go/guestbook-controller.json kubectl apply -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook-go/guestbook-service.json","title":"Guestbook app written in PHP and using Redis for storing guest entries."},{"location":"eksdesdecero/ekslab1/#get-pods","text":"[ec2-user@ip-172-31-5-35 ~]$ kubectl get pods NAME READY STATUS RESTARTS AGE guestbook-fg5q9 0/1 Pending 0 4h57m guestbook-lr6w9 0/1 Pending 0 4h57m guestbook-rmxdm 0/1 Pending 0 4h57m redis-master-7bs4q 0/1 Pending 0 4h57m redis-slave-dg2kg 0/1 Pending 0 4h57m redis-slave-mfwwf 0/1 Pending 0 4h57m","title":"get pods"},{"location":"eksdesdecero/ekslab1/#describe-pods","text":"$ kubectl describe pods $ kubectl get pods --all-namespaces NAMESPACE NAME READY STATUS RESTARTS AGE default guestbook-kc7z7 1/1 Running 0 45m default guestbook-qdkpv 1/1 Running 0 45m default guestbook-wp44s 1/1 Running 0 45m default redis-master-tgd9f 1/1 Running 0 45m default redis-slave-25z8n 1/1 Running 0 45m default redis-slave-qkgbk 1/1 Running 0 45m kube-system aws-node-7fm2b 1/1 Running 0 53m kube-system aws-node-kq796 1/1 Running 0 53m kube-system aws-node-ls4xt 1/1 Running 0 53m kube-system coredns-5fb4bd6df8-s6vpr 1/1 Running 0 57m kube-system coredns-5fb4bd6df8-x5244 1/1 Running 0 57m kube-system kube-proxy-7dn58 1/1 Running 0 53m kube-system kube-proxy-lgtv2 1/1 Running 0 53m kube-system kube-proxy-xgjdn 1/1 Running 0 53m","title":"describe pods"},{"location":"eksdesdecero/ekslab1/#get-nodes","text":"$ kubectl get nodes --show-labels NAME STATUS ROLES AGE VERSION LABELS ip-192-168-17-115.us-east-2.compute.internal Ready <none> 50m v1.15.10-eks-bac369 alpha.eksctl.io/cluster-name=eksworkshop-eksctl,alpha.eksctl.io/nodegroup-name=nodegroup,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=m5.large,beta.kubernetes.io/os=linux,eks.amazonaws.com/nodegroup-image=ami-08880278b3cac5832,eks.amazonaws.com/nodegroup=nodegroup,failure-domain.beta.kubernetes.io/region=us-east-2,failure-domain.beta.kubernetes.io/zone=us-east-2b,kubernetes.io/arch=amd64,kubernetes.io/hostname=ip-192-168-17-115.us-east-2.compute.internal,kubernetes.io/os=linux ip-192-168-42-126.us-east-2.compute.internal Ready <none> 50m v1.15.10-eks-bac369 alpha.eksctl.io/cluster-name=eksworkshop-eksctl,alpha.eksctl.io/nodegroup-name=nodegroup,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=m5.large,beta.kubernetes.io/os=linux,eks.amazonaws.com/nodegroup-image=ami-08880278b3cac5832,eks.amazonaws.com/nodegroup=nodegroup,failure-domain.beta.kubernetes.io/region=us-east-2,failure-domain.beta.kubernetes.io/zone=us-east-2a,kubernetes.io/arch=amd64,kubernetes.io/hostname=ip-192-168-42-126.us-east-2.compute.internal,kubernetes.io/os=linux ip-192-168-68-123.us-east-2.compute.internal Ready <none> 50m v1.15.10-eks-bac369 alpha.eksctl.io/cluster-name=eksworkshop-eksctl,alpha.eksctl.io/nodegroup-name=nodegroup,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=m5.large,beta.kubernetes.io/os=linux,eks.amazonaws.com/nodegroup-image=ami-08880278b3cac5832,eks.amazonaws.com/nodegroup=nodegroup,failure-domain.beta.kubernetes.io/region=us-east-2,failure-domain.beta.kubernetes.io/zone=us-east-2c,kubernetes.io/arch=amd64,kubernetes.io/hostname=ip-192-168-68-123.us-east-2.compute.internal,kubernetes.io/os=linux","title":"get nodes"},{"location":"eksdesdecero/ekslab1/#another-way-to-get-pods","text":"$ kubectl get po --show-labels NAME READY STATUS RESTARTS AGE LABELS guestbook-kc7z7 1/1 Running 0 30m app=guestbook guestbook-qdkpv 1/1 Running 0 30m app=guestbook guestbook-wp44s 1/1 Running 0 30m app=guestbook redis-master-tgd9f 1/1 Running 0 31m app=redis,role=master redis-slave-25z8n 1/1 Running 0 31m app=redis,role=slave red``` ### view the kube config file $ vim .kube/config ### get services $ kubectl get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE guestbook LoadBalancer 10.100.181.57 acca42460a222450992ad93a597fe11f-494034622.us-east-2.elb.amazonaws.com 3000:31115/TCP 24m kubernetes ClusterIP 10.100.0.1 <none> 443/TCP 36m redis-master ClusterIP 10.100.246.73 <none> 6379/TCP 24m redis-slave ClusterIP 10.100.255.129 <none> 6379/TCP 24m","title":"another way to get pods"},{"location":"eksdesdecero/ekslab1/#get-namespaces","text":"$ kubectl get ns NAME STATUS AGE default Active 40m kube-node-lease Active 40m kube-public Active 40m kube-system Active 40m $ kubectl get events --all-namespaces NAMESPACE LAST SEEN TYPE REASON OBJECT MESSAGE default 24m Normal Scheduled pod/guestbook-kc7z7 Successfully assigned default/guestbook-kc7z7 to ip-192-168-17-115.us-east-2.compute.internal default 24m Normal Pulling pod/guestbook-kc7z7 Pulling image \"k8s.gcr.io/guestbook:v3\" default 24m Normal Pulled pod/guestbook-kc7z7 Successfully pulled image \"k8s.gcr.io/guestbook:v3\" default 24m Normal Created pod/guestbook-kc7z7 Created container guestbook default 24m Normal Started pod/guestbook-kc7z7 Started container guestbook default 24m Normal Scheduled pod/guestbook-qdkpv Successfully assigned default/guestbook-qdkpv to ip-192-168-42-126.us-east-2.compute.internal default 24m Normal Pulling pod/guestbook-qdkpv Pulling image \"k8s.gcr.io/guestbook:v3\" default 24m Normal Pulled pod/guestbook-qdkpv Successfully pulled image \"k8s.gcr.io/guestbook:v3\" default 24m Normal Created pod/guestbook-qdkpv Created container guestbook","title":"get namespaces"},{"location":"eksdesdecero/ekslab1/#another-example-nginx-with-3-replicas","text":"","title":"Another Example: NGINX with 3 Replicas"},{"location":"eksdesdecero/ekslab1/#run-nginx-from-scratch-in-5-mins","text":"$ kubectl run nginx --image nginx --replicas 3 --port 80 deployment.apps/nginx created","title":"run Nginx from scratch in 5 mins"},{"location":"eksdesdecero/ekslab1/#expose-service","text":"$ kubectl expose deployment nginx --type=LoadBalancer service/nginx exposed","title":"expose service"},{"location":"eksdesdecero/ekslab1/#get-services","text":"$ kubectl get services -o=wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR guestbook LoadBalancer 10.100.181.57 acca42460a222450992ad93a597fe11f-494034622.us-east-2.elb.amazonaws.com 3000:31115/TCP 3h47m app=guestbook kubernetes ClusterIP 10.100.0.1 <none> 443/TCP 3h59m <none> nginx LoadBalancer 10.100.46.84 aec9f297b0c434da2b1f67dfb90de0e6-1071448948.us-east-2.elb.amazonaws.com 80:30507/TCP 14s run=nginx redis-master ClusterIP 10.100.246.73 <none> 6379/TCP 3h47m app=redis,role=master redis-slave ClusterIP 10.100.255.129 <none> 6379/TCP 3h47m app=redis,role=slave","title":"get services"},{"location":"eksdesdecero/ekslab1/#get-nodes_1","text":"$ kubectl get nodes NAME STATUS ROLES AGE VERSION ip-192-168-17-115.us-east-2.compute.internal Ready <none> 3h55m v1.15.10-eks-bac369 ip-192-168-42-126.us-east-2.compute.internal Ready <none> 3h55m v1.15.10-eks-bac369 ip-192-168-68-123.us-east-2.compute.internal Ready <none> 3h55m v1.15.10-eks-bac369","title":"get nodes"},{"location":"eksdesdecero/ekslab1/#bonus-cheat-sheet-from-linux-academy","text":"Cheat Sheet https://linuxacademy.com/site-content/uploads/2019/04/Kubernetes-Cheat-Sheet_07182019.pdf","title":"bonus: cheat sheet from linux academy"},{"location":"eksdesdecero/ekswelcome/","text":"Aprendiendo Kubernetes desde cero en AWS con EKS Tendremos sesiones basicas, intermedias y avanzadas, basadas en eksworkshop.com en castellano y actualizados. EKSWorkshop.com es realizado y mantenido por AWS, y esta web se encarga de entregarlo en un idioma distinto, con ejemplos adicionales, asi como tema s que complementen el aprendizaje con EKS. Workshops disponibles: Talleres basicos necesarios: Aprende a lanzar Nginx y escalarlo manualmente con EKS Aprende a usar EKS junto con SSM, KMS y en 3 AZs (NUEVO!) Empieza con Helm y lanza una aplicacion rapida con Charts (NUEVO!) Taller de Seguridad en EKS: Evalua la seguridad de tu cluster de EKS con kube-bench y CIS EKS Benchmark (NUEVO!)","title":"Bienvenido"},{"location":"eksdesdecero/ekswelcome/#aprendiendo-kubernetes-desde-cero-en-aws-con-eks","text":"Tendremos sesiones basicas, intermedias y avanzadas, basadas en eksworkshop.com en castellano y actualizados. EKSWorkshop.com es realizado y mantenido por AWS, y esta web se encarga de entregarlo en un idioma distinto, con ejemplos adicionales, asi como tema s que complementen el aprendizaje con EKS. Workshops disponibles: Talleres basicos necesarios: Aprende a lanzar Nginx y escalarlo manualmente con EKS Aprende a usar EKS junto con SSM, KMS y en 3 AZs (NUEVO!) Empieza con Helm y lanza una aplicacion rapida con Charts (NUEVO!) Taller de Seguridad en EKS: Evalua la seguridad de tu cluster de EKS con kube-bench y CIS EKS Benchmark (NUEVO!)","title":"Aprendiendo Kubernetes desde cero en AWS con EKS"}]}